import React from "react";
import { useForm, SubmitHandler } from "react-hook-form";
import { TextField, Button } from "@mui/material";
import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";
import useEventQueries from "../hooks/useEventQueries"; // Assume this hook contains your mutation

// Define the form input types with File
type EventFormInputs = {
  name: string;
  startDate: string; // Dates as strings to handle HTML input type="date"
  endDate: string;
  location: string;
  thumbnail: File;
  status: string; // File for the thumbnail
};

// Define Yup validation schema
const schema = yup.object().shape({
  name: yup.string().required("Event name is required"),
  startDate: yup.string().required("Start date is required"), // Keep this as a string
  endDate: yup.string().required("End date is required"), // Keep this as a string
  location: yup.string().required("Location is required"),
  thumbnail: yup
    .mixed()
    .required("A thumbnail file is required")
    .test("fileRequired", "You must upload a file", (value) => {
      return value instanceof File;
    }),
});

const EventForm = () => {
  const {
    register,
    handleSubmit,
    setValue,
    formState: { errors },
  } = useForm<EventFormInputs>();

  const { createEvent } = useEventQueries();

  // Handle file input changes and set the file in the form
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]; // Get the first file
    if (file) {
      setValue("thumbnail", file); // Set the file as the form value
    }
  };

  const onSubmit: SubmitHandler<EventFormInputs> = (data) => {
    createEvent.mutate(data);
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <TextField
        label="Event Name"
        {...register("name")}
        error={!!errors.name}
        helperText={errors.name?.message}
      />
      <TextField
        type="date"
        label="Start Date"
        {...register("startDate")}
        error={!!errors.startDate}
        helperText={errors.startDate?.message}
      />
      <TextField
        type="date"
        label="End Date"
        {...register("endDate")}
        error={!!errors.endDate}
        helperText={errors.endDate?.message}
      />
      <TextField
        label="Location"
        {...register("location")}
        error={!!errors.location}
        helperText={errors.location?.message}
      />
      <input
        type="file"
        accept="image/*"
        onChange={handleFileChange} // Handle file selection
      />
      {errors.thumbnail && <p>{errors.thumbnail.message}</p>}
      <Button type="submit">Create Event</Button>
    </form>
  );
};

export default EventForm;
